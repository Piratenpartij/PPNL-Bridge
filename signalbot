#!/usr/bin/perl -w
#
# Signal Daemon for Hermod Gateway Bot.
#
# Keeping a tail on the signal-cli dbus daemon for new messages from signal.
# These are send to other chats
#
# 2021, Ruben de Groot

use strict;
use threads;
use JSON;
use TOML;
use URI::Escape;
use DBI;
use Capture::Tiny 'tee';
use Hermod;
use Encode qw(decode_utf8);

open my $fh, '<', "/etc/hermod.toml" or die "error opening configuration $!";
my ($cfg, $e) = from_toml do { local $/; <$fh> };
unless ($cfg) {
    die "Error parsing toml: $e";
}

unless (defined $cfg->{signal}->{phone} and defined $cfg->{signal}->{cli} and
        defined $cfg->{signal}->{gid}) {
    print "Please define signal->phone, signal->cli and signal->gidi\n";
    print "Press <Ctrl>-C to continue\n";
    sleep; exit;
}

my $sig = $cfg->{signal};
$sig->{nicks} = getalias($sig);
$ENV{JAVA_HOME} = $sig->{JAVA_HOME} if defined $sig->{JAVA_HOME};
open my $dbg, ">>", $sig->{debug} if defined $sig->{debug};
my $tel = $cfg->{telegram} if defined $cfg->{telegram};
my $irc = $cfg->{irc} if defined $cfg->{irc};
my $mat = $cfg->{matrix} if defined $cfg->{matrix};
my $mm = $cfg->{mattermost} if defined $cfg->{mattermost};
my $dis = $cfg->{discord} if defined $cfg->{discord};

# start a thread to keep a tail on the signal->infile
my $thr = threads->create(\&Hermod::signalinfilereader,$sig,$dbg);

for (;;) {

    # tailing signal dbus
    open(my $dbus, "-|", "$sig->{cli}", "-u", "$sig->{phone}", "daemon", "--json");

    # now poll the signal group for new messages
    my $json = JSON->new->allow_nonref;
    while (my $line = <$dbus>) {

        print $line;
        print $dbg $line if defined $dbg;

        my $sigmsg = $json->decode($line);
        next unless defined $sigmsg->{envelope}->{dataMessage};
        $sigmsg = $sigmsg->{envelope};
        my $datamsg = $sigmsg->{dataMessage};

        my $sender = (defined $sigmsg->{source}) ? $sigmsg->{source} : "";
        my $group = (defined $datamsg->{groupInfo}->{groupId}) ? $datamsg->{groupInfo}->{groupId} : "";
        my $attach = (defined $datamsg->{attachments}) ? $datamsg->{attachments} : undef;

        my $msg = (defined $datamsg->{message}) ? $datamsg->{message} : "";
        my $text = '';
        my $sav = $msg;
        eval { $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg; };
        $text = $sav if $@; # try undecoded string as last resort

        # is the message a quote
        my $quote = "";
        if (defined $datamsg->{quote}{text}) {
            my $qtext = $datamsg->{quote}{text}; chomp $qtext;
            $qtext = (length($qtext) > 100) ? "(reply to ". substr($qtext,0,100) ."...) " : "(reply to: $qtext) ";
            $sav = $qtext;
            eval { $quote .= decode_utf8($qtext, Encode::FB_QUIET) while $qtext; };
            $quote = $sav if $@; # try undecoded string as last resort
        }

        # anonymize sender telephone
        my $anonsender = $sender;
        if (defined $sig->{nicks}->{$sender}) {

            $anonsender = $sig->{nicks}->{$sender};
        } else {

            $anonsender =~ s/.*(\d\d\d\d)$/$cfg->{common}->{anon}-$1/;
            $sig->{nicks}->{$sender} = $anonsender;
            nickhelp($sig,$sender,$anonsender);
            setalias($sig,$sender,$anonsender);
        }

        # check for setnick command
        if ($text =~ /^!setnick/) {
            (my $nick = $text) =~ s/^!setnick.//s;
            if ($nick) {
                setalias($sig,$sender,$nick);
                $sig->{nicks}->{$sender} = $nick;
                $text = "$anonsender is now known as $nick\n";

                # notify the signal group
                Hermod::relay2sig($text,$sig,$dbg);

                # notify chats
                $text = "[sig] $text";
                Hermod::relay2irc($text,$irc,"",$dbg);
                Hermod::relay2mtx($text,$mat,$dbg);
                Hermod::relay2mm($text,$mm,$dbg);
                Hermod::relay2dis($text,$dis,$dbg);
                Hermod::relay2tel($tel,$text);

                next;
            }
        } elsif ($text =~ /^!users/) {

            # user list asked; relay command to hermod
            Hermod::relay2irc("CMD!SIG!users\n",$irc,"");
            next;
        }

        # only relay group messages with contents
        next unless $group eq $sig->{gid};
        next unless $text or $attach;

        # relay to all chats
        my $pre = "[sig] $anonsender: ";
        if ($text =~ /\S/) {

            Hermod::relay2tel($tel,"$pre$quote$text\n",$dbg);
            Hermod::relay2irc("$quote$text\n",$irc,$pre,$dbg);
            Hermod::relay2mm("$pre$quote$text\n",$mm,$dbg);
            Hermod::relay2mtx("$pre$quote$text\n",$mat,$dbg);
            Hermod::relay2dis("$pre$quote$text\n",$dis,$dbg);
        }

        # relay optional attachments
        foreach my $att (@$attach) {
            (my $ext = $att->{contentType}) =~ s#.*/##;
            rename "$sig->{attachments}/$att->{id}", "$sig->{attachments}/$att->{id}.$ext";
            my $type = ($att->{contentType} =~ /image/) ? 'photo' : 'document';

            my $filemsg = "FILE!$sig->{url}/$att->{id}.$ext!$att->{contentType}!$sig->{attachments}/$att->{id}.$ext [sig] $type by $anonsender\n";
            my $msg = "[sig] **$anonsender sends a $type: $sig->{url}/$att->{id}.$ext\n";

            (defined $mm->{bearer}) ?
                Hermod::relayFile2mm($filemsg,$mm,$dbg) : 
                Hermod::relay2mm($msg,$mm,$dbg);
            Hermod::relayFile2tel($filemsg,$tel,$type,$dbg);
            Hermod::relay2mtx($msg,$mat,$dbg);
            Hermod::relay2dis($msg,$dis,$dbg);
            Hermod::relay2irc($msg,$irc,$dbg);
        }
    }
    close $dbus;
}

sub getalias {
    my $sig = shift;
    my $alias;
    my $dbh = DBI->connect("dbi:SQLite:dbname=$sig->{db}", "", "", { RaiseError => 1 }, ) or die $DBI::errstr;
    my $obj = $dbh->prepare("select * from alias");
    $obj->execute() or die $DBI::errstr;

    while (my $row = $obj->fetchrow_hashref()) {
        $alias->{$row->{phone}} = $row->{nick};
    }
    return $alias;
}

sub setalias {
    my ($sig,$phone,$nick) = @_;
    my $dbh = DBI->connect("dbi:SQLite:dbname=$sig->{db}", "", "", { RaiseError => 1 }, ) or die $DBI::errstr;
    $dbh->do("insert or replace into alias (phone,nick) values (?,?)", undef, $phone, $nick) or die $DBI::errstr;
    $dbh->disconnect();
}

sub nickhelp {
    my ($sig,$phone,$nick) = @_;
    my $text = 'You do not have a nickname set. You are now known as '.$nick;
    $text .= '. To change this, simply type !setnick yournickname on a new line in the group or in a private message to me.';
    my ($out, $err, $ret) = tee {
        system($sig->{cli},"-u",$sig->{phone},"send","-m","$text",$phone);
    };
    print $dbg $out, $err if defined $dbg;
    notify($err) if $err;
}

sub notify {
    my $err = shift;
    my $msg = '';
    my $hostname = qx( hostname ); chomp $hostname;

    # filters here
    if ($err =~ /Failed to send \(some\) messages:/) {
        while ($err =~ /Untrusted Identity for "(\+[\d]+)"/g) {
            unless (defined $sig->{unreg}->{$1}) {
                $sig->{unreg}->{$1} = 1;
                $msg .= " $1";
            }
        }
        $msg = "Untrusted users: $msg\n" if $msg;
    } else {
        $msg = $err;
    }

    # notify daily on errors
    return if defined $sig->{errors}->{$msg} and $sig->{errors}->{$msg} > time - 86400;
    $sig->{errors}->{$msg} = time;

    qx( $cfg->{common}->{notify} "Signalpoller on $hostname: $msg" ) if defined $cfg->{common}->{notify} and $msg;
}

