#!/usr/bin/perl -w
#
# Webhook for Hermod Telegram Gateway Bot. The hook can be set by the command:
#
# curl -F "url=https://webserver/cgi-bin/telehook" https://api.telegram.org/bot$TOKEN/setWebhook
#
# messages are filtered a little and then relayed to other channels
#
# 2019, Ruben de Groot

use strict;
use CGI::Fast qw/:standard/;
use JSON;
use TOML;
use Text::Unidecode;
use DBI;
use Hermod;

open my $fh, '<', "/etc/hermod.toml" or die "error opening configuration $!";
my ($cfg, $e) = from_toml do { local $/; <$fh> };
unless ($cfg) {
    die "Error parsing toml: $e";
}

unless (defined $cfg->{telegram}->{token} and defined $cfg->{telegram}->{chat_id}) {
    print CGI->header(-type => 'application/json');
    print '{"ok": false, "status": 500, "error": "token or chat_id undefined"}'."\n\n";
    exit;
}
my $tel = $cfg->{telegram};
open my $dbg, ">>:utf8", $tel->{debug} if defined $tel->{debug};

my $irc = $cfg->{irc} if defined $cfg->{irc};
my $mat = $cfg->{matrix} if defined $cfg->{matrix};
my $sig = $cfg->{signal} if defined $cfg->{signal};
my $mm = $cfg->{mattermost} if defined $cfg->{mattermost};
my $dis = $cfg->{discord} if defined $cfg->{discord};

# bots cannot get a list of group members, so we keep a database
my $dbh = DBI->connect("dbi:SQLite:dbname=$tel->{db}", "", "", { RaiseError => 1 }, )
        if defined $tel->{db};
my $st_ins = $dbh->prepare("insert into teleusers (id,first_name,last_name,username,is_bot) values (?,?,?,?,?)")
        if defined $dbh;
my $st_del = $dbh->prepare("delete from teleusers where id = ?")
        if defined $dbh;

while (my $cgi = CGI::Fast->new) {
    my $body = (defined $cgi->param('POSTDATA')) ? $cgi->param('POSTDATA') : '{}';
    my $dj = decode_json( $body );
    
    print $dbg "$body\n" if defined $dbg;
    
    # check type of msg and chat_id
    if (defined $dj->{message}->{chat}->{id} and $dj->{message}->{chat}->{id} == $tel->{chat_id}) {

        my ($fline,$ircfline);
        my $msg = $dj->{message};
        my $user_id = (defined $msg->{from}->{id} and $msg->{from}->{id} =~ /^\d+$/) ?
            $dj->{'message'}->{'from'}->{id} : 0;
        my $text = (defined $msg->{text}) ? $msg->{text} : "";
        my $first = (defined $msg->{from}->{first_name}) ? $msg->{from}->{first_name} : "";
        my $last = (defined $msg->{from}->{last_name}) ? $msg->{from}->{last_name} : "";
        my $caption = (defined $msg->{caption}) ? $msg->{caption} : "";
        
        # look for photo's and documents
        my ($type,$doc,$mime);
        if (defined $msg->{photo}) {
            $doc = @{$msg->{photo}}[-1];
            $type = 'photo';
            $mime = 'image';
        }
        foreach my $t ('voice', 'audio', 'document', 'video') { 
            if (defined $msg->{$t}) {
                $doc = $msg->{$t};
                $type = $t;
            }
        }
        
        if (defined $doc->{file_id}) {

            # download the file
            my $response = qx( curl -s "https://api.telegram.org/bot$tel->{token}/getFile?file_id=$doc->{file_id}" );
            print $dbg "$response\n" if defined $dbg;
            eval {
                my $djfile = decode_json( $response );
                my $path = $djfile->{result}->{file_path};
                (my $file = $path) =~ s#.*/##;
                (my $ext = $file) =~ s#.*\.##;

                # hack mime-type
                $ext = "jpeg" if $ext =~ /^jpg/i;
                $mime = (defined $doc->{mime_type}) ? $doc->{mime_type} : "$mime/$ext";

                my $name = (defined $doc->{file_name}) ? $doc->{file_name} : $file;
                qx( wget -O $tel->{attachments}/$file https://api.telegram.org/file/bot$tel->{token}/$path >/dev/null 2>&1 );
                if ($? == 0) {

                    $fline = "FILE!$tel->{url}!$mime!$tel->{attachments}/$file [tel] $first $last";
                    $fline .= ": $caption" if $caption;
                    $ircfline = "** sends $type: $tel->{url}/$file";
                    $ircfline .= " with caption: $caption" if $caption;
                } else {
                    print $dbg "Error getting $type $name $file\n" if defined $dbg;
                }
            }
        }

        # is the message a poll?
        if (defined $msg->{poll}) {

            my $p = $msg->{poll};
            $text .= "\n" if $text;
            $text .= "Poll: $p->{question}\n";
            my $i;
            for my $o (@{$p->{options}}) {
                $text .= ++$i.") $o->{text}\n";
            }
        }

        # is the message a sticker?
        if (defined $msg->{sticker}) {
            my $sticknam = (defined $msg->{sticker}->{set_name}) ? $msg->{sticker}->{set_name} : '';
            $text .= "\n" if $text;
            $text .= "sends a $sticknam sticker ";
            $text .= $msg->{sticker}->{emoji} if defined $msg->{sticker}->{emoji};
        }
        
        # is the message a reply?
        $text = "(reply to: $msg->{reply_to_message}->{text}) " . $text if defined $msg->{reply_to_message} and
            $msg->{reply_to_message}->{text};

        # is the message a forward?
        if (defined $msg->{forward_from_chat}->{id} or defined $msg->{forward_from}->{id}) {
            my $forw_id = (defined $msg->{forward_from}->{id}) ? $msg->{forward_from}->{id} :
                $msg->{forward_from_chat}->{id};

            my $title = (defined $msg->{forward_from}->{title}) ? $msg->{forward_from}->{title} :
                (defined $msg->{forward_from_chat}->{title}) ? $msg->{forward_from_chat}->{title} :
                (defined $msg->{forward_from}->{first_name}) ? $msg->{forward_from}->{first_name} :
                (defined $msg->{forward_from_chat}->{first_name}) ? $msg->{forward_from_chat}->{first_name} : "Forward";
            $title = $msg->{forward_from_chat}->{first_name} unless $title;

            $text = "[Fwd from $title]: ";
            $text .= ($msg->{text}) ? "$msg->{text}\n" : "\n";
            if ($ircfline) {
                $ircfline =~ s/\*\* sends //;
            }
        }

        # is the message a channel post?
        
        # look for new chat members
        if (defined $msg->{new_chat_members}) {
            my $members = '';
            foreach my $m (@{$msg->{new_chat_members}}) {
                $st_ins->execute($m->{id},$m->{first_name},$m->{last_name},$m->{username},$m->{is_bot}) if defined $st_ins;
                $members .= ', ' if $members;
                $members .= "$m->{first_name}";
                $members .= " $m->{last_name}" if $m->{last_name};
            }
            $text = "[tel] $members joined the chat\n";

            # relay to all chats
            Hermod::relayToFile($text,$_,$dbg) for $irc->{infile}, $sig->{infile};
            Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
            Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
            Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
            ok("New member(s): $members\n");
        }
        
        # look for leaving chat members
        if (defined $msg->{left_chat_member}->{id}) {
            $st_del->execute($msg->{left_chat_member}->{id}) if defined $st_del;
            $text = "[tel] $msg->{left_chat_member}->{first_name} left the chat\n";

            # relay to all chats
            Hermod::relayToFile($text,$_,$dbg) for $irc->{infile}, $sig->{infile};
            Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
            Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
            Hermod::relay2dis($text,$mm,$dbg) if defined $dis;

            ok("Leaving member: $msg->{left_chat_member}->{first_name}\n");
        }

        # look for commands
        if ($text =~ /!users/) {

            # user list asked; relay command to hermod
            Hermod::relayToFile("CMD!TEL!users\n",$_,$dbg) for $irc->{infile};

            ok("!users command relayed for $first $last\n");
        }

        # optional append file link url
        my $ftext = ($ircfline) ? "$text $ircfline" : $text;
        my $pre = "[tel] $first $last: ";

        # send to irc
        Hermod::relay2irc("$ftext\n",$irc,$pre,$dbg) if defined $irc;

        # send to matrix
        Hermod::relay2mtx("$pre$ftext\n",$mat,$dbg) if defined $mat;

        # send to discord
        Hermod::relay2dis("$pre$ftext\n",$dis,$dbg) if defined $dis;

        # for signal, mattermost, we skip document, photo links as they are uploaded
        if ($text and $text !~ /\*\* sends /) {

            # relay to signal
            Hermod::relayToFile("$pre$text\n",$_,$dbg) for $sig->{infile};

            # send to mattermost
            Hermod::relay2mm("$pre$text\n",$mm,$dbg) if defined $mm;
        }

        # print file line to signal, mattermost
        if ($fline) {

            # relay file to signal
            Hermod::relayToFile("$fline\n", $_) for $sig->{infile};

            # relay file to mattermost
            Hermod::relayFile2mm($fline,$mm) if defined $mm;
        }
    }
    ok();
}

sub ok {
    my $msg = shift;
    print $dbg $msg if defined $msg and defined $dbg;
    print CGI->header(-type => 'application/json');
    print '{"ok": true, "status": 200}'."\n\n";
    exit;
}

