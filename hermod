#!/usr/bin/perl
#
# IRC Bot for Hermod Telegram Gateway. Reads from a logfile to be send to irc and relays
# messages from irc to telegram and to another logfile which is send to a signal group
# by signalpoller.
#
# 2019, Ruben de Groot

use strict;
use POE qw(Component::IRC Component::IRC::Plugin::FollowTail Component::IRC::Plugin::BotAddressed Component::SSLify);
use URI::Escape;
use JSON qw( decode_json );
use TOML;
use DBI;
use Hermod;
use Encode qw( decode_utf8 );

open my $fh, '<', "/etc/hermod.toml" or die "error opening configuration $!";
my ($cfg, $e) = from_toml do { local $/; <$fh> };
unless ($cfg) {
    die "Error parsing toml: $e";
}

open my $dbg, ">>", $cfg->{irc}->{debug} if defined $cfg->{irc}->{debug};
my $tel = $cfg->{telegram} if defined $cfg->{telegram};
my $sig = $cfg->{signal} if defined $cfg->{signal};
my $mat = $cfg->{matrix} if defined $cfg->{matrix};
my $mm = $cfg->{mattermost} if defined $cfg->{mattermost};
my $dis = $cfg->{discord} if defined $cfg->{discord};

my $URL = "https://api.telegram.org/bot$tel->{token}/sendMessage";

# We create a new PoCo-IRC object
my $irc = POE::Component::IRC->spawn(
   nick     => $cfg->{irc}->{nick},
   ircname  => $cfg->{irc}->{ircname},
   password => $cfg->{irc}->{password},
   username => $cfg->{irc}->{ident},
   server   => $cfg->{irc}->{node},
   Port     => $cfg->{irc}->{port},
   UseSSL   => $cfg->{irc}->{UseSSL},
) or die "Oh noooo! $!";

POE::Session->create(
    package_states => [
        main => [ qw(_default _start irc_001 irc_public irc_msg irc_join irc_quit irc_nick irc_tail_input irc_ctcp_action irc_353 irc_bot_addressed irc_bot_mentioned) ],
    ],
    heap => { irc => $irc },
);

$poe_kernel->run();

sub _start {

    # file to be read and send to the channel
    $irc->plugin_add( FollowTail => POE::Component::IRC::Plugin::FollowTail->new(
        filename => $cfg->{irc}->{infile},
    ));

    # respond when we are mentioned or addressed
    $irc->plugin_add( BotAddressed => POE::Component::IRC::Plugin::BotAddressed->new() );

    $irc->yield( register => 'all' );
    $irc->yield( connect => { } );
    return;
}

sub irc_001 {
    my $sender = $_[SENDER];
    my $irc = $sender->get_heap();
    print "Connected to ", $irc->server_name(), "\n";
    print $dbg "Connected to ", $irc->server_name(), "\n" if defined $dbg;

    # we join our channel
    $irc->yield( join => $cfg->{irc}->{channel} );
}

sub irc_public {

    # handle normal messages in irc channel
    my ($sender, $who, $where, $what) = @_[SENDER, ARG0 .. ARG2];
    my $nick = ( split /!/, $who )[0];

    # catch commands
    if ($what =~ /^!users/i) {

        # send names to IRC, split lines in chunks of ~maxmsg size if necessary
        for my $text (teleusers(),signalusers()) {
            next unless $text;
            if (length $text > $cfg->{irc}->{maxmsg}) {
                $text =~ s/(.{1,$cfg->{irc}->{maxmsg}}\S|\S+)\s+/$1\n/g;
                $irc->yield( 'privmsg', $cfg->{irc}->{channel}, "$_" ) for split /\n/, $text;
            } else {
                $irc->yield( 'privmsg', $cfg->{irc}->{channel}, "$text" );
            }
        }
        return;

    }

    my $msg = "[irc] $nick: $what\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    Hermod::relay2tel($tel,$text,$dbg) if defined $tel;
    Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
    Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
    Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
    Hermod::relayToFile($text,$_,$dbg) for $sig->{infile};
}

sub irc_msg {

    # handle private messages
    my ($who, $what) = @_[ARG0, ARG2];
    my $nick = ( split /!/, $who )[0];
    if ($what =~ /^!users/) {

        # send names to nick, split lines in chunks of ~maxmsg size if necessary
        for my $text (teleusers(),signalusers()) {
            next unless $text;
            if (length $text > $cfg->{irc}->{maxmsg}) {
                $text =~ s/(.{1,$cfg->{irc}->{maxmsg}}\S|\S+)\s+/$1\n/g;
                $irc->yield( 'privmsg', $nick, "$_" ) for split /\n/, $text;
            } else {
                $irc->yield( 'privmsg', $nick, "$text" );
            }
        }
        return;
    }
    # send apologies
    $irc->yield( 'privmsg', $nick, "Hi, $nick, I don't do private messages, except:" );
    $irc->yield( 'privmsg', $nick, "!users - list users in other channels (telegram, signal)" );
}

sub irc_ctcp_action {

    # handle /me events
    my ($sender, $who, $where, $what) = @_[SENDER, ARG0 .. ARG2];
    my $nick = ( split /!/, $who )[0];

    my $msg = "[irc] ***$nick $what\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    Hermod::relay2tel($tel,$text,$dbg) if defined $tel;
    Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
    Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
    Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
    Hermod::relayToFile($text,$_,$dbg) for $sig->{infile};
}

sub irc_nick {

    # handle /nick events
    my ($whowas,$who) = @_[ARG0, ARG1];
    my $nick = ( split /!/, $whowas )[0];

    my $msg = "[irc] $nick is now known as $who\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    Hermod::relay2tel($tel,$text,$dbg) if defined $tel;
    Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
    Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
    Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
    Hermod::relayToFile($text,$_,$dbg) for $sig->{infile};
}

sub irc_join {

    # someone joins the channel
    my ($who,$channel) = @_[ARG0, ARG1];
    my $nick = ( split /!/, $who )[0];
    return if $nick eq $cfg->{irc}->{nick};

    my $msg = "[irc] $nick joined the chat\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    if (defined $cfg->{irc}->{showjoin}) {
        Hermod::relay2tel($tel,$text,$dbg) if defined $tel;
        Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
        Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
        Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
        Hermod::relayToFile($text,$_,$dbg) for $sig->{infile};
    }
}

sub irc_quit {

    # someone leaves the channel
    my ($who,$msg) = @_[ARG0, ARG1];
    my $nick = ( split /!/, $who )[0];

    my $msg = "[irc] $nick quit the chat ($msg)\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    if (defined $cfg->{irc}->{showquit}) {
        Hermod::relay2tel($tel,$text,$dbg) if defined $tel;
        Hermod::relay2mm($text,$mm,$dbg) if defined $mm;
        Hermod::relay2mtx($text,$mat,$dbg) if defined $mat;
        Hermod::relay2dis($text,$dis,$dbg) if defined $dis;
        Hermod::relayToFile($text,$_,$dbg) for $sig->{infile};
    }
}

sub irc_353 {

    # RPL_NAMREPLY
    my ($names) = @_[ARG1];
    $names =~ s/:(.*)$/$1/;
    my @users = split / /, $names;

    my $msg = "IRC users: " . (join ', ', @users[2..$#users]) . "\n";
    my $text = '';
    $text .= decode_utf8($msg, Encode::FB_QUIET) while $msg;

    if (defined $cfg->{irc}->{names_asked} and $cfg->{irc}->{names_asked} eq 'TEL') {

        $text .= "Signal users: " . signalusers() . "\n" if defined $sig->{db};
        Hermod::relay2tel($tel,$text) if defined $tel;

    } elsif (defined $cfg->{irc}->{names_asked} and $cfg->{irc}->{names_asked} eq 'SIG') {

        $text .= "Telegram users: " . teleusers() . "\n" if defined $tel->{db};
        Hermod::relayToFile($text,$sig->{infile}) if defined $sig;
    }
}

sub irc_tail_input {

    # handle text added to irc->infile
    my ($kernel, $sender, $input) = @_[KERNEL, SENDER, ARG1];
    next unless $input;

    # check for files
    if ($input =~ /^FILE!/) {

        $input = substr $input,5;
        my ($fileinfo,$caption) = split / /, $input, 2; chomp $caption;
        my ($url,$mime) = split /!/, $fileinfo;
        $kernel->post( $sender, 'privmsg', $cfg->{irc}->{channel}, "$caption: $url\n" );

    # check for commands
    } elsif ($input =~ /^CMD!TEL!users/) {
        $irc->yield( names => $cfg->{irc}->{channel} );
        $cfg->{irc}->{names_asked} = 'TEL';
    } elsif ($input =~ /^CMD!SIG!users/) {
        $irc->yield( names => $cfg->{irc}->{channel} );
        $cfg->{irc}->{names_asked} = 'SIG';

    # send the message as is
    } else {
        $kernel->post( $sender, 'privmsg', $cfg->{irc}->{channel}, $input );
    }
}

sub irc_bot_addressed {

    # Reply when someone addresses me
    my ($sender, $what) = @_[SENDER, ARG2];
    my $nick = ( split /!/, $_[ARG0] )[0];
 
    my $text = "Hi $nick, you addressed me, but I'm just a messenger bot, please don't shoot me. I relay messages between IRC, Telegram, Signal, Mattermost and Matrix users. You can see the name of the person who spoke to you directly after the [tel], [sig], [mm] or [mtx] tag.";
    $irc->yield( 'privmsg', $cfg->{irc}->{channel}, "$text" );
    print $dbg "$nick addressed me with the message '$what'\n" if defined $dbg;
}
 
sub irc_bot_mentioned {
    my ($sender, $what) = @_[SENDER, ARG2];
    my ($nick) = ( split /!/, $_[ARG0] )[0];
 
    my $text = "Hi $nick, you mentioned me. I'm a messenger bot, don't shoot me. I relay messages between IRC, Telegram, Signal, Mattermost and Matrix users. You can see the name of the person who spoke to you directly after the [tel], [sig], [mm] or [mtx] tag.";
    $irc->yield( 'privmsg', $cfg->{irc}->{channel}, "$text" );
    print $dbg "$nick mentioned my name with the message '$what'\n" if defined $dbg;
}

sub _default {

    # This will produce some debug info.
    my ($event, $args) = @_[ARG0 .. $#_];
    my @output = ( "$event: " );

    for my $arg (@$args) {
        if ( ref $arg eq 'ARRAY' ) {
            push( @output, '[' . join(', ', @$arg ) . ']' );
        }
        else {
            push ( @output, "'$arg'" );
        }
    }
    print join ' ', @output, "\n";
    print $dbg join ' ', @output, "\n" if defined $dbg;
    if (grep(/irc_disconnect/,@output)) {
        my $hostname = qx( hostname -f );
        qx( $cfg->{common}->{notify} "Hermod died on $hostname\n" ) if defined $cfg->{common}->{notify};
        print "I got disconnected :( :(\nKilling myself..\n";
        exit(1);
    }
}

sub teleusers {

    # returns list of telegram users as string
    my $users = '';
    return $users unless defined $tel;
    eval {
        my $dbh = DBI->connect("dbi:SQLite:dbname=$tel->{db}", "", "", { RaiseError => 1 }, );
        my $st = $dbh->prepare("select * from teleusers");
        $st->execute();
        while (my $row = $st->fetchrow_hashref()) {
            $users .= ', ' if $users;
            $users .= "$row->{first_name}";
            $users .= " $row->{last_name}" if defined $row->{last_name};
        }
    };
    return "Telegram users: $users\n";
}

sub signalusers {

    # returns list of signal users as string
    my $users = '';
    return $users unless defined $sig;
    eval {
        my $dbh = DBI->connect("dbi:SQLite:dbname=$sig->{db}", "", "", { RaiseError => 1 }, );
        my $st = $dbh->prepare("select * from alias");
        $st->execute();
        while (my $row = $st->fetchrow_hashref()) {
            $users .= ', ' if $users;
            $users .= "$row->{nick}";
        }
    };
    return "Signal users: $users\n";
}
